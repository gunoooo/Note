//
//  TransferPresenter.swift
//  Project
//
//  Created by Park on 2021/06/12.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TransferPresentationLogic {
    func presentAuthResult(response: TransferModels.Auth.Response)
    func presentTransferResult(response: TransferModels.Transfer.Response)
}

class TransferPresenter: TransferPresentationLogic {
    weak var viewController: TransferDisplayLogic?
    
    func presentAuthResult(response: TransferModels.Auth.Response) {
        if let error = response.error {
            switch error {
                case .fetchLoginTypeError(let fetchLoginTypeError):
                    switch fetchLoginTypeError {
                        case ._로그인수단확인불가:
                            displayAuthError("일시적인 오류가 발생하였습니다\n[로그인수단확인불가]")
                    }
                case .fetchTridError(let fetchTridError):
                    switch fetchTridError {
                        case ._백그라운드세션초과:
                            displayAuthError("세션이 만료되었습니다")
                        case .networkError(let networkError):
                            networkError.perform({ [weak self] errorValue in
                                self?.displayAuthError(
                                    "일시적인 오류가 발생하였습니다\n\(errorValue.errorMessage)(\(errorValue.errorCode))"
                                )
                            })
                    }
                case .reqeustOnePassError(let requestOnePassError):
                    switch requestOnePassError {
                        case ._데이터처리오류:
                            displayAuthError("데이터 처리중 오류가 발생하였습니다")
                        case ._인증키오류:
                            displayAuthError("데이터 처리중 오류가 발생하였습니다")
                        case ._사용자취소(let errorCode):
                            displayAuthError("취소되었습니다 (\(errorCode))")
                        case ._정보변경(let errorCode):
                            displayAuthError("정보가 변경되었습니다. 다시 시도해주세요 (\(errorCode))")
                        case ._오류횟수초과(let errorCode):
                            displayAuthError("오류횟수가 초과되었습니다. 다시 시도해주세요 ((\(errorCode))")
                        case ._네트워크연결오류(let errorCode):
                            displayAuthError("네트워크 연결이 좋지 않습니다 (\(errorCode))")
                        case ._휴대폰미설정(let errorCode):
                            displayAuthError("인증수단을 등록해주세요 (\(errorCode))")
                        case ._인증불일치(let errorCode):
                            displayAuthError("인증에 실패하였습니다 (\(errorCode))")
                        case ._세션초과(let errorCode):
                            displayAuthError("세션이 만료되었습니다 (\(errorCode))")
                        case .defaultError(let errorValue):
                            displayAuthError(
                                "일시적인 오류가 발생하였습니다\n\(errorValue.errorMessage)(\(errorValue.errorCode))"
                            )
                    }
                case ._인증수단잠김:
                    displayAuthError("인증수단 실패횟수가 4회를 초과하였습니다")
            }
        } else {
            viewController?.displayAuthSuccess(viewModel: TransferModels.Auth.ViewModel(authData: response.authData))
        }
    }
    
    func presentTransferResult(response: TransferModels.Transfer.Response) {
        if let error = response.error {
            switch error {
                case .ourTransferError(let ourTransferError):
                    switch ourTransferError {
                        case ._잔액부족:
                            displayTransferError("잔액이 부족합니다")
                        case ._계좌조회오류:
                            displayTransferError("계좌 조회중 오류가 발생하였습니다")
                        case .networkError(let networkError):
                            networkError.perform({ [weak self] errorValue in
                                self?.displayTransferError(
                                    "일시적인 오류가 발생하였습니다\n\(errorValue.errorMessage)(\(errorValue.errorCode))"
                                )
                            })
                    }
                case .otherTransferError(let otherTransferError):
                    switch otherTransferError {
                        case ._타행점검시간:
                            displayTransferError("점검시간입니다")
                        case ._잔액부족:
                            displayTransferError("잔액이 부족합니다")
                        case ._계좌조회오류:
                            displayTransferError("계좌 조회중 오류가 발생하였습니다")
                        case .networkError(let networkError):
                            networkError.perform({ [weak self] errorValue in
                                self?.displayTransferError(
                                    "일시적인 오류가 발생하였습니다\n\(errorValue.errorMessage)(\(errorValue.errorCode))"
                                )
                            })
                    }
            }
        } else {
            viewController?.displayTransferError(viewModel: .init(successMessage: response.successMessage))
        }
    }
    
    private func displayAuthError(_ errorMessage: String) {
        viewController?.displayAuthError(
            viewModel: .init(errorMessage: errorMessage)
        )
    }
    
    private func displayTransferError(_ errorMessage: String){
        viewController?.displayTransferError(
            viewModel: .init(errorMessage: errorMessage)
        )
    }
}
